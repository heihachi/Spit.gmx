<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>speed_key = ord('Q');
reset_key = ord('R');
HelpMenu = ord('H');
//Set the view variables used in the draw step
view_score = view_wview[0]+(view_xview[0]);
view_lives = view_wview[0]+(view_xview[0]);
view_ammos = view_wview[0]+(view_xview[0]);
//hard code diff for testing purposes
global.diff = "normal";
//use checks for diff
if(global.diff == "normal")
{
    // Pencil Variables such as firing speed and the rate of firing
    global.pencilfiresp = 14;
    global.pencilrate = 12;

    // Sharper Variables such as firing speed and the rate of firing    
    global.sharperfiresp = 20;
    global.sharperrate = 5;
    // Set enemy health based on diff specialenemy have more health and should drop items all the time unless on hard
    global.enemyhp = 10;
    global.specialenemyhp = 40;
    //enemy drop chance
    global.drop = 5;
    
    // global damage for pencils and sharper
    global.pdamage = 3;
    global.sdamage = 2;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//speed up gamee when pressed
if(keyboard_check_pressed(speed_key))
{
    if(room_speed == 30)
    {
        room_speed = 60;
    }
    else
    {
        room_speed = 30;
    }
}
//restart the game when pressed
if(keyboard_check_pressed(reset_key))
{
    room_restart();
}


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//if player presses right declared in obj_player (no need to declare again) this keeps the key global for this purpose
if(keyboard_check(obj_player.right))
{
    //each view has a specific rate (score = 5, lives = 3, ammos=2)
    view_score = view_wview[0]+(view_xview[0]*5*30/room_speed);
    view_lives = view_wview[0]+(view_xview[0]*3*30/room_speed);
    view_ammos = view_wview[0]+(view_xview[0]*2*30/room_speed);
}
//if player presses left send the drawings to the left
else if(keyboard_check(obj_player.left))
{
    //each view has a specific rate (score = 5, lives = 3, ammos=2)
    view_score = view_wview[0]-(view_xview[0]*-5*30/room_speed);
    view_lives = view_wview[0]-(view_xview[0]*-3*30/room_speed);
    view_ammos = view_wview[0]-(view_xview[0]*-2*30/room_speed);
}
//actually draw the stuff using the view points
draw_text((view_score)/5-string_width(string ("Score: ")+ string(score)),16,string ("Score: ")+ string(score));
draw_text((view_lives)/3-string_width(string ("Lives: ")+ string(obj_player.PlayerLives)),16,string ("Lives: ")+ string(obj_player.PlayerLives));
//if weapon is melee weapon draw melee text
if(obj_player.current == 1)
{
   draw_text((view_ammos)/2-string_width(string ("Melee")),16,string ("Melee")); 
}
//else if weapon is pencils draw pencils text 
else if(obj_player.current == 2)
{
    draw_text((view_ammos)/2-string_width(string ("Ammo: ")+ string(obj_player.PAmmoOnPlayer)),16,string ("Ammo: ")+ string(obj_player.PAmmoOnPlayer));
}
//else if weapon is sharper draw sharper text
else if(obj_player.current == 3)
{
    draw_text((view_ammos)/2-string_width(string ("Ammo: ")+ string(obj_player.SAmmoOnPlayer)),16,string ("Ammo: ")+ string(obj_player.SAmmoOnPlayer));
}

//stuff that was here when i got the game
if(keyboard_check_pressed(HelpMenu))
{
    text_height = 16;
    resetStr = "Reset: R";
    speedStr = "Change framerate cap: Q";
    slideStr = "Toggle sliding: F";
    gradientStr = "Toggle gradient: G";
    shapeStr = "Change shape: E";
    colorStr = "Change color: Up/Down";
    scaleStr = "Resize shape: Shift+Up/Down";
    alphaStr = "Change alpha: Ctrl+Up/Down";
    draw_text(room_width-string_width(resetStr),0,resetStr);
    draw_text(room_width-string_width(speedStr),text_height,speedStr);
    draw_text(room_width-string_width(slideStr),2*text_height,slideStr);
    draw_text(room_width-string_width(gradientStr),3*text_height,gradientStr);
    draw_text(room_width-string_width(shapeStr),4*text_height,shapeStr);
    draw_text(room_width-string_width(colorStr),5*text_height,colorStr);
    draw_text(room_width-string_width(scaleStr),6*text_height,scaleStr);
    draw_text(room_width-string_width(alphaStr),7*text_height,alphaStr);
}



</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
