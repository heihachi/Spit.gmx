<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//These are pretty much readable
square = 1;
circle = 2;
triangle = 3;
gradientEnabled = 1;
color1 = c_green;
color2 = c_red;
drawAlpha = 1;
drawShape = square;
drawScale = 1;
shape_key = ord('E');
gradient_key = ord('G');
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(keyboard_check_pressed(shape_key))
{
    if(drawShape &lt; triangle)
    {
        drawShape ++;
    }
    else
    {
        drawShape = square;
    }
}
if(keyboard_check_pressed(gradient_key))
{
    if(gradientEnabled)
    {
        gradientEnabled = 0;
    }
    else
    {
        gradientEnabled = 1;
    }
}
if(keyboard_check(vk_shift))
{
    if(keyboard_check(vk_up))
    {
        drawScale += .05;
    }
    if(keyboard_check(vk_down))
    {
        drawScale -= .05;
    }
}
else if(keyboard_check(vk_control))
{
    if(keyboard_check(vk_up))
    {
        drawAlpha += .05;
        if(drawAlpha &gt; 1)
        {
            drawAlpha = 1;
        }
    }
    if(keyboard_check(vk_down))
    {
        drawAlpha -= .05;
        if(drawAlpha &lt; 0)
        {
            drawAlpha = 0;
        }
    }
}
else
{
    if(keyboard_check(vk_up))
    {
        color1 += 1;
        color2 += 1;
    }
    if(keyboard_check(vk_down))
    {
        color1 -= 1;
        color2 -= 1;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_set_color(color1);
draw_set_alpha(drawAlpha);

if(gradientEnabled)
{
    if(drawShape == square)
    {
        draw_rectangle_color(x-16*drawScale,y-16*drawScale,x+16*drawScale,y+16*drawScale,color1,color1,color2,color2,0);
    }
    else if(drawShape == circle)
    {
        draw_circle_color(x,y,16*drawScale,color1,color2,0);
    }
    else
    {
        draw_triangle_color(x-16*drawScale,y+16*drawScale,x+16*drawScale,y+16*drawScale,x,y-16*drawScale,color1,color2,color2,0);
    }
}
else
{
    if(drawShape == square)
    {
        draw_rectangle(x-16*drawScale,y-16*drawScale,x+16*drawScale,y+16*drawScale,0);
    }
    else if(drawShape == circle)
    {
        draw_circle(x,y,16*drawScale,0);
    }
    else
    {
        draw_triangle(x-16*drawScale,y+16*drawScale,x+16*drawScale,y+16*drawScale,x,y-16*drawScale,0);
    }
}
draw_set_color(c_black);
draw_set_alpha(1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
