<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_player</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//assign movement keys
left = ord('A');
right = ord('D');
jump = vk_space;
slide_key = ord('F');
fire = ord('P');

//assign movement values
slideEnabled = 0;
grounded = 0;
xsp = 0;
ysp = 0;
jumpSp = -9;
xspCap = 4;
yspCap = 12;
grav = .35;
groundAccel = .4;
airAccel = .2;
groundSlide = .2;
airSlide = .1;

//added
faceing=1;
image_speed=0;
image_index=1;
//FireRate= 0.5 * room_speed;
PAmmoOnPlayer = 30; //pencil ammo
SAmmoOnPlayer = 25; //sharper ammo
PlayerLives=3; //amount of lives
OriginX= obj_player.x; //origin x of player
OriginY= obj_player.y; //origin y of player

pencilfire = 1; //make sure you can shoot a pencil
sharperfire = 1; //make sure you can shoot a pencil from a sharper
current = 1; // current weapon equipped default is 1 which is melee (melee isnt coded)
alloweddamage = 1; //allowed damage is for collison with enemies
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// allow a few seconds of no damage 
alloweddamage = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// same as the alarm0
sharperfire = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Reset the firing of pencils need a better way to handle this or make all weapons use this timer.
pencilfire = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Slide mode check
if(keyboard_check_pressed(slide_key))
{
    if(slideEnabled == 0)
    {
        slideEnabled = 1;
    }
    else
    {
        slideEnabled = 0;
    }
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Movement without sliding
if(!slideEnabled)
{
    grounded = 0;
    //xsp is the amount of pixels the player should move horizontally per step. 4 is the base value, negated for left.
    //ysp is the amount of pixels the player should move vertically per step.
    //room_speed is the amount of steps(frames) per second the game is performing. 30 is its base value, so multiplying
    //the base xsp value(4) by 30/room_speed accounts for higher or lower framerate settings.
    //For example, a room_speed of 60 means the game is running at twice default speed, so the player needs to move half as many
    //pixels per step(2). 30/60 = 1/2, 1/2 * 4 = 2.
    if(keyboard_check(left))
    {
        //faceing=0;
        //image_index=0;
        xsp = -4*30/room_speed;
    }
    if(keyboard_check(right))
    {
        //faceing=1;
        //image_index=1;
        xsp = 4*30/room_speed;
    }
    if((!keyboard_check(left) &amp;&amp; !keyboard_check(right)) || (keyboard_check(left) &amp;&amp; keyboard_check(right)))
    {
        xsp = 0;
    }
    
    //Jumping
    
    //Check for ground below player
    if(place_meeting(x,y+1,obj_wall))
    {
        grounded = 1;
    }
    
    if(grounded)
    {
        if(keyboard_check(jump))
        {
            ysp = jumpSp;
        }
    }
    else
    {
        ysp += grav;
        if(ysp &gt; yspCap)
        {
            ysp = yspCap;
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Movement with sliding
if(slideEnabled)
{
    //Check for ground beneath the player
    if(place_meeting(x,y+1,obj_wall))
    {
        grounded = 1;
    }
    else
    {
        grounded = 0;
    }
    
    if(grounded)
    {
        //Instead of setting xsp to a value immediately, it isincremented every step until it reaches the cap. This creates a sliding effect.
        if(keyboard_check(left))
        {
            xsp -= groundAccel*30/room_speed;
            if(xsp &lt; -xspCap*30/room_speed)
            {
                xsp = -xspCap*30/room_speed;
            }   
        }
        if(keyboard_check(right))
        {
            xsp += groundAccel*30/room_speed;
            if(xsp &gt; xspCap*30/room_speed)
            {
                xsp = xspCap*30/room_speed;
            }
        }
        if((!keyboard_check(left) &amp;&amp; !keyboard_check(right)) || (keyboard_check(left) &amp;&amp; keyboard_check(right)))
        {
            if(abs(xsp) &lt;= groundSlide*30/room_speed)
            {
                xsp = 0;
            }
            if(xsp &gt; 0)
            {
                xsp -= groundSlide*30/room_speed;
            }
            else if(xsp &lt; 0)
            {
                xsp += groundSlide*30/room_speed;
            }
        }
    }
    else
    {
        if(keyboard_check(left))
        {
            xsp -= airAccel*30/room_speed;
            if(xsp &lt; -xspCap*30/room_speed)
            {
                xsp = -xspCap*30/room_speed;
            }   
        }
        if(keyboard_check(right))
        {
            xsp += airAccel*30/room_speed;
            if(xsp &gt; xspCap*30/room_speed)
            {
                xsp = xspCap*30/room_speed;
            }
        }
        if((!keyboard_check(left) &amp;&amp; !keyboard_check(right)) || (keyboard_check(left) &amp;&amp; keyboard_check(right)))
        {
            if(abs(xsp) &lt;= airSlide*30/room_speed)
            {
                xsp = 0;
            }
            if(xsp &gt; 0)
            {
                xsp -= airSlide*30/room_speed;
            }
            else if(xsp &lt; 0)
            {
                xsp += airSlide*30/room_speed;
            }
        }
    }
    
    //Jumping   
    if(grounded)
    {
        if(keyboard_check(jump))
        {
            sound_play(snd_jump);
            ysp = jumpSp*30/room_speed;
        }
    }
    else
    {
        ysp += grav*30/room_speed;
        if(ysp &gt; yspCap*30/room_speed)
        {
            ysp = yspCap*30/room_speed;
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Actual movement of the player on the screen

//Move one direction at a time, one pixel at a time, until a collision is reached or all pixels have been moved
//sign(x) returns 1 if x is positive, -1 if x is negative
for(i=0;i&lt;abs(xsp);i++)
{
    // if not meeting obj_wall on the x axis
    if(!place_meeting(x+sign(xsp),y,obj_wall))
    {
        //add to x to advance player
        x += sign(xsp);
    }
}
//jumping for loop
for(i=0;i&lt;abs(ysp);i++)
{
    //if not meeting obj_wall on the y axis
    if(!place_meeting(x,y+sign(ysp),obj_wall))
    {
        //increase y
        y += sign(ysp);
    }
    //if not grounded and not touching the floor
    if(place_meeting(x,y+sign(ysp),obj_wall) &amp;&amp; grounded == 0)
    {
        //make player fall
        ysp += grav;
    } 
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*
    Script to allow firing a weapon or in this case pencils
    James
*/

//Set variable to use with alarm to fire
if(keyboard_check_pressed(ord("1"))) //1 = melee
{
    current = 1;
}
if(keyboard_check_pressed(ord("2"))) //2 = pencils
{
    current = 2;
}
if(keyboard_check_pressed(ord("3"))) //3 = sharper
{
    current = 3;
}

//comment here
//if(keyboard_check(fire))
if(mouse_check_button(mb_left))
{
    //if current weapon is pencils
    if(current = 2)
    {
        // if player has ammo
        if(PAmmoOnPlayer&gt;0)
        {
            //if player can fire
            if(pencilfire = 1)
            {
                //Set pencilfire to 0 so we cant fire again for a second.
                pencilfire = 0;
                var newbullet; //create a newbullet
                newbullet = instance_create(x,y,obj_pencil); //create on player
                newbullet.sp = 5; //set pencil's speed to 5
                sound_play(snd_pencilfire); // play the pencilfire sound
            }
        }
        //if there is no ammon on player
        else if(PAmmoOnPlayer&lt;=0)
        {
            //Do nothing add sound later
        }
    }
    //if current weapon is a sharper
    if(current = 3)
    {
        // if player has sharper ammo
        if(SAmmoOnPlayer&gt;0)
        {
            // if the sharper can fire
            if(sharperfire = 1)
            {
                //Set pencilfire to 0 so we cant fire again for a second.
                sharperfire = 0;
                var newsharper; //create new sharper varable
                newsharper = instance_create(x,y,obj_sharper); //create new sharper on player
                newsharper.sp = 5; //set new sharper bullet speed to 5
                sound_play(snd_pencilfire); // player firing sound
            }
        }
        // if player has no ammon
        else if(SAmmoOnPlayer&lt;=0)
        {
            //if emptyclip isnt playing
            if(!sound_isplaying(snd_emptyclip))
            {
                //play emptyclip sound
                sound_play(snd_emptyclip);
            }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Make player always face mouse
if(obj_player.x&lt;mouse_x)
{
    // change facing to right
    Facing=1;
    image_index=1;
}
else if(obj_player.x&gt;mouse_x)
{
    //change facing to left 
    Facing=0;
    image_index=0;
}
//if the player has no more lives end the game
if(PlayerLives &lt;= 0)
{
    //go to game over room
    room_goto(rm_gameover);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_enemy_global">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//if we get a collison with a enemy we lose a live and set time to "recover"
//used to set timer
if(alloweddamage == 1)
{
    //lose a life
    obj_player.PlayerLives -= 1;
    //set alloweddamage to 0 so we dont lose all our lives at once
    alloweddamage = 0;
    // set timer can change
    obj_player.alarm[3] = 50;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>16,16</point>
    <point>16,16</point>
  </PhysicsShapePoints>
</object>
